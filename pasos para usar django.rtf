0-Crear un proyecto desde cero todo los pasos  juntos

1- tengo que ir a una consola y ubicarme en la carpeta donde quiero crear un proyecto

2- activo el entorno virtual, en este caso uso conda mini , así que utilizo el comando source activate django2 (django2 es el nombre que le puse al entorno virtual)

3-ahora si creo un proyecto usando el comando python manage.py startproject y el nombre que le quiero poner

4-abro la carpeta en el visual Code y con el botón derecho abro en terminal el manage.py

5- creo la aplicación usando el comando manage.py startapp y el nombre que quiero ponerle en este caso “core”

6-creo las vistas en el archivo views de core. agregando httpresponse después de rendir en el sector de import.
Creo las vistas de la siguiente manera:  
# Create your views here.
def home (request):
    return HttpResponse("Inicio")
def about (request):
    return HttpResponse("Historia")
def services (request):
    return HttpResponse("Servicios")

7-Cambiamos esta forma de tener las url y las organizamos de otra manera (video organizando las url)
Creo un archivo urls.py adentro de mi app core y copio todos los path y los llevo ahí. Importo desde la raíz
from . import views

urlpatterns = [
    path('',views.home, name="home"),
    path('about/', views.about, name="about"),
    path('services/', views.services, name="services"),
    path('store/',views.store, name="store"),
    path('contact/', views.contact, name="contact"),
    path('blog/', views.blog, name="blog"),
    path('sample/', views.sample, name="sample"),
]

Y en el archivo urls.py del proyecto webempresa queda de esta manera, colócando include en el import y agregando solo
La ruta a mis url en core.
urlpatterns = [
    #path del core
    path('', include('core.urls')),

    #path del admin
    path('admin/', admin.site.urls),
]

ASI ES COMO LO HICE PRIMERO 
importo las views de core y creo las url patean en el archivo url de la aplicación core de esta manera.

from core import views

urlpatterns = [
    #path del core
    path('',views.home, name="home"),
    path('about/', views.about, name="about"),
    path('services/', views.services, name="services"),
    path('store/',views.store, name="store"),
    path('contact/', views.contact, name="contact"),
    path('blog/', views.blog, name="blog"),
    path('sample/', views.sample, name="sample"),
    #path del admin
    path('admin/', admin.site.urls),
]

8- copio los archivos estáticos del frontend y los pego en la carpeta de static /core de mi backend
Lo mismo tengo que hacer con las paginas html , las copio del frontend y las pego en mi carpeta templates/core 

9- le decimos a django que carga nuestras paginas poniendo en Setting.py  aplicación definition nuestra app llamada core

10- borramos el http request y dejamos el render esto en nuestras views de core. Y hacemos un render de cada pagina quedando así:
from django.shortcuts import render

# Create your views here.
def home (request):
    return render(request, "core/Inicio.html")
def about (request):
    return render(request, "core/Historia.html")
def services (request):
    return render(request, "core/Servicios.html")
def store (request):
    return render(request, "core/Visitanos.html")
def contact (request):
    return render(request, "core/Contacto.html")
def blog (request):
    return render(request, "core/Blog.html")
def sample (request):
    return render(request, "core/Sample.html")

11-tenemos que cargar los ficheros estáticos asi que ponemos un Block tag llamado load static y modificamos las direcciones de los archivos estáticos.
{% load static %}
    <!-- Bootstrap -->
    <link href="{% static 'core/vendor/bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">

12-copiamos el home y lo pegamos en el misma carpeta core , le cambiamos el nombre a base.html y es este archivo el que vamos a modificar para que sea la base de todos. Elimino las partes que se repiten q son heredadas de base.html en todas las paginas.

13-para que se ilumine el menú que seleccionamos usamos la variable request path. Donde esta el active en el link lo rodeo con un tag if de esta manera. Entonces cuando seleccione algún menú este va a quedar iluminado.
{% if request.path == '/' %}active{% endif %}

14-creamos una carpeta llamada media en la raíz. Entramos al archivo Setting.py y agregamos un path de la siguiente manera:
#media config
MEDIA_URL = '/media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

15- vamos a urls.py y importamos los settings que creamos recién. 
from django.conf import settings

Y agregamos un path 
if settings.DEBUG:
    from django.conf.urls.static import static
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

16-creamos un app llamada services
La registramos en setting debajo de core

17- creo un modelo en la app service (tabla )

class Service(models.Model):
    title = models.CharField(max_length=200, verbose_name="Titulo")
    subtitle = models.CharField(max_length=200, verbose_name="Subtitulo")
    content = models.TextField(verbose_name="Contenido")
    image = models.ImageField(verbose_name="Imagen", upload_to="services")
    created = models.DateTimeField(auto_now_add=True, verbose_name="Fecha de creacion")
    updated = models.DateTimeField(auto_now=True, verbose_name="Fecha de edicion")

    class Meta:
        verbose_name = "servicio"
        verbose_name_plural = "servicios"
        ordering = ['-created']

    def __str__(self):
        return self.title
18- hago un makemigrations y después un mígate
19-ahora tenemos que hacer q esta app (services) sea accesible desde el panel de administrador así que vamos al fichero admin.py e importamos el modelo service
Y registramos el modelo service

from .models import Service

# Register your models here.
class ServiceAdmin(admin.ModelAdmin):
    readonly_fields = ('created', 'updated')

admin.site.register(Service, ServiceAdmin)

20-hago un runserver y veo que todo ande bien, ahora vamos a traducir al español
Entramos a settings.py y ponemos leguanje code en = es
Para traducir la app entro a apps.py y agrego un verbose name
class ServicesConfig(AppConfig):
    name = 'services'
    verbose_name = 'Gestor de servicios'
Ahora volvemos a settings y le decimos que utilice esta configuración extendida
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'services.apps.ServicesConfig'
Todo esto en video 37
